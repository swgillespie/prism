syntax = "proto3";

package prism.ingest.v1;

import "google/protobuf/empty.proto";
import "temporal/v1/temporal.proto";
import "prism/common/v1/partition.proto";

message IngestObjectRequest {
  string tenant_id = 1;
  string table = 2;
  string source = 3;
  string destination = 4;
  string location = 5;
  string idempotency_token = 6;
}

message TransformToParquetRequest {
  string tenant_id = 1;
  string table = 2;
  string source = 3;
  string destination = 4;
  string location = 5;
}

message TransformToParquetResponse {
  prism.common.v1.PartitionWithColumns partition = 1;
}

message RecordNewPartitionRequest {
  string tenant_id = 1;
  string table = 2;
  prism.common.v1.PartitionWithColumns partition = 3;
}

service Ingest {
  option (temporal.v1.service) = {
    task_queue: "prism-ingest"
  };

  rpc IngestObject(IngestObjectRequest) returns (google.protobuf.Empty) {
    option (temporal.v1.workflow) = {
      execution_timeout: { seconds: 360 }
      id_reuse_policy: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY
      id: 'ingest/${! idempotencyToken.slug() }'
    };
  }

  rpc TransformToParquet(TransformToParquetRequest) returns (TransformToParquetResponse) {
    option (temporal.v1.activity) = {
      start_to_close_timeout: { seconds: 360 }
    };
  }

  rpc RecordNewPartition(RecordNewPartitionRequest) returns (google.protobuf.Empty) {
    option (temporal.v1.activity) = {
      start_to_close_timeout: { seconds: 30 }
    };
  }
}